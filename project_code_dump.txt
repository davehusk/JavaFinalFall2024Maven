---/pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.keyin</groupId>
    <artifactId>JavaFinalFall2024Maven</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>22</maven.compiler.source>
        <maven.compiler.target>22</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.7.4</version>
        </dependency>

        <dependency>
            <groupId>org.mindrot</groupId>
            <artifactId>jbcrypt</artifactId>
            <version>0.4</version>
        </dependency>
    </dependencies>

</project>
---

---/.idea/encodings.xml
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="Encoding">
    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
  </component>
</project>
---

---/.idea/misc.xml
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ExternalStorageConfigurationManager" enabled="true" />
  <component name="MavenProjectsManager">
    <option name="originalFiles">
      <list>
        <option value="$PROJECT_DIR$/pom.xml" />
      </list>
    </option>
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/out" />
  </component>
</project>
---

---/.idea/vcs.xml
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$" vcs="Git" />
  </component>
</project>
---

---/.idea/inspectionProfiles/Project_Default.xml
<component name="InspectionProjectProfileManager">
  <profile version="1.0">
    <option name="myName" value="Project Default" />
    <inspection_tool class="SqlNoDataSourceInspection" enabled="false" level="WARNING" enabled_by_default="false" />
  </profile>
</component>
---

---/src/main/java/com/keyin/EcomApp.java
package com.keyin;

import com.keyin.cars.Car;
import com.keyin.cars.CarService;
import com.keyin.user.User;
import com.keyin.user.UserService;

import java.sql.SQLException;
import java.util.Scanner;

public class EcomApp {
   private static final UserService userService = new UserService();
   private static final CarService carService = new CarService();
    public static void main(String[] args) throws SQLException {

        Scanner sc = new Scanner(System.in);

        int choice = 0;

            while(true){
                displayMainMenu(sc);

            choice = sc.nextInt();

            switch (choice) {
                case 1:
                    registerUser(sc);
                    break;
                case 2:
                    loginUser(sc);
                    break;

                    case 3:
                        System.out.println("Exiting App... Peace Out");
                        return;

                default:
                    break;
            }
        }


    }

    private static void displayMainMenu(Scanner sc) {
        System.out.println("Welcome To Our Aplication!");
        System.out.println("What Would You Like To Do?");
        System.out.println("1: Create A New User");
        System.out.println("2: Login The User");
        System.out.println("3: Exit Application");

    }

    private static void loginUser(Scanner sc) throws SQLException {
        System.out.println("Login Menu.....");
        System.out.println("Enter Username");
        String username = sc.next();
        System.out.println("Enter Password");
        String password = sc.next();

        User loggedInUser = userService.login(username,password);

        if(loggedInUser != null) {
            System.out.println("Login Successful");
            if(loggedInUser.getUsername().equals("KHollet")){
                kyleDashBoard(sc,loggedInUser);
            }
        } else{
            System.out.println("Login Failed");
        }
    }

    private static void kyleDashBoard(Scanner sc, User loggedInUser) throws SQLException {
        while(true){
            System.out.println("Welcome To Kyle Dash Board");
            System.out.println("Please Choose What You Wanna Do!");
            System.out.println("1: Print Kyle info");
            System.out.println("2: Create A New Car ");
            System.out.println("3: See All Cars For Kyle ");
            System.out.println("4: Exit Back To Main");
            int choice = sc.nextInt();

            if (choice == 1) {
                printKyleInfo(loggedInUser);
            } else if (choice == 2) {
                createNewCarDashBoard(sc,loggedInUser);
            } else if (choice == 3) {
                printCarsForUser(loggedInUser);
            } else{
                return;
            }


        }


    }

    private static void printCarsForUser(User loggedInUser) throws SQLException {

        carService.getCarForSellerById(loggedInUser);

    }

    private static void createNewCarDashBoard(Scanner sc, User loggedInUser) throws SQLException {
        System.out.println("Welcome To Create A New Car!");
        System.out.println("Please Choose What You Wanna Do!");
        System.out.println("Enter Car Make: ");
        String make = sc.next();
        System.out.println("Enter Car Model: ");
        String model = sc.next();
        System.out.println("Enter Car Year: ");
        int year = sc.nextInt();
        System.out.println("Enter Car Price: ");
        double price = sc.nextDouble();

        Car car = new Car(make,model,year,price,loggedInUser.getUser_id());

        carService.createNewCar(car);






    }


    private static void printKyleInfo(User loggedInUser) {
        System.out.println("Kyle Details:");
        System.out.println("Username: " + loggedInUser.getUsername());
        System.out.println("Password: " + loggedInUser.getPassword());
    }


    private static void registerUser(Scanner sc) throws SQLException {
        System.out.println("Create User Menu.......");
        System.out.println("------------------------------");
        System.out.println("Enter Username:");
        String userName = sc.next();
        System.out.println("Enter Email:");
        String email = sc.next();
        System.out.println("Enter Password:");
        String password = sc.next();
        System.out.println("---------------------------");

        User user = new User(userName,email,password);

        userService.addUser(user);
    }


}


---

---/src/main/java/com/keyin/cars/Car.java
package com.keyin.cars;

public class Car {

    private int car_id;
    private String make;
    private String model;
    private int year;
    private double price;
    private int seller_id;

    public Car(int car_id, String make, String model, int year, double price, int seller_id) {
        this.car_id = car_id;
        this.make = make;
        this.model = model;
        this.year = year;
        this.price = price;
        this.seller_id = seller_id;
    }

    public Car(String make, String model, int year, double price, int seller_id) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.price = price;
        this.seller_id = seller_id;
    }

    public int getCar_id() {
        return car_id;
    }

    public void setCar_id(int car_id) {
        this.car_id = car_id;
    }

    public String getMake() {
        return make;
    }

    public void setMake(String make) {
        this.make = make;
    }

    public String getModel() {
        return model;
    }

    public void setModel(String model) {
        this.model = model;
    }

    public int getYear() {
        return year;
    }

    public void setYear(int year) {
        this.year = year;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getSeller_id() {
        return seller_id;
    }

    public void setSeller_id(int seller_id) {
        this.seller_id = seller_id;
    }
}
---

---/src/main/java/com/keyin/cars/CarDAO.java
package com.keyin.cars;

import com.keyin.database.DatabaseConnection;
import com.keyin.user.User;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class CarDAO {

    public void getAllCars() throws SQLException {
        ResultSet rs = null;
        String sql = "SELECT * FROM cars";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            rs = pstmt.executeQuery();
            while (rs.next()) {
                int car_id = rs.getInt("car_id");
                String make = rs.getString("make");
                String model = rs.getString("model");
                double price = rs.getDouble("price");
                int seller_id = rs.getInt("seller_id");

                System.out.println("-----------------");
                System.out.println("Car ID: " + car_id);
                System.out.println("Make : " + make);
                System.out.println("Model : " + model);
                System.out.println("Price : " + price);
                System.out.println("Seller ID: " + seller_id);
                System.out.println("-------------------------");
            }

        };
    }

    public void addNewCar(Car car) throws SQLException{
        String sql = "INSERT INTO cars (make,model,year, price,seller_id) VALUES (?, ?, ?, ?,?)";

        try(Connection conn = DatabaseConnection.getConnection()){
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, car.getMake());
            preparedStatement.setString(2, car.getModel());
            preparedStatement.setInt(3, car.getYear());
            preparedStatement.setDouble(4, car.getPrice());
            preparedStatement.setInt(5, car.getSeller_id());

            preparedStatement.executeUpdate();

        }
    }

    public ResultSet getAllCarsForUser(User user) throws SQLException {
        ResultSet rs = null;
        String sql = "SELECT * FROM cars where seller_id=?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1,user.getUser_id());
            rs = pstmt.executeQuery();
            System.out.println("List Of Cars For Owner " + user.getUsername()+ " " + user.getUser_id());
            while (rs.next()) {
                int car_id = rs.getInt("car_id");
                String make = rs.getString("make");
                String model = rs.getString("model");
                int year = rs.getInt("year");
                double price = rs.getInt("price");
                int seller_id = rs.getInt("seller_id");

                System.out.println("Car Id: " + car_id );
                System.out.println("make: " + make);
                System.out.println("Model " + model);
                System.out.println("year: " + year);
                System.out.println("price : " + price);
                System.out.println("------------------------------------");
            }


        } catch (SQLException e) {
            throw new RuntimeException(e);
        }


        return rs;
    }




}

---

---/src/main/java/com/keyin/cars/CarService.java
package com.keyin.cars;



import com.keyin.user.User;

import java.sql.SQLException;

public class CarService {

    CarDAO carDAO = new CarDAO();

    public void listAllCars() throws SQLException {
        carDAO.getAllCars();
    }

    public boolean createNewCar(Car car) throws SQLException {

        if(car == null){
            return false;
        }

        carDAO.addNewCar(car);
        System.out.println("Car Was Created! Woo!");
        return true;
    }

    public void getCarForSellerById(User user) throws SQLException {
        if(user == null){
            System.out.println("Provide A User Please ");
        }else {
            carDAO.getAllCarsForUser(user);
        }



    }

}

---

---/src/main/java/com/keyin/database/DatabaseConnection.java
package com.keyin.database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DatabaseConnection {
    private static final String URL = "jdbc:postgresql://localhost:5432/s3finaljava";
    private static final String USER = "postgres";
    private static final String PASSWORD = "jordan1234";

    public static Connection getConnection() throws SQLException, SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }


}

---

---/src/main/java/com/keyin/user/User.java
package com.keyin.user;

public class User {
    private int user_id;
    private String username;
    private String email;
    private String password;

    public User(int user_id, String username, String email, String password) {
        this.user_id = user_id;
        this.username = username;
        this.email = email;
        this.password = password;
    }

    public User(String username, String email, String password) {
        this.username = username;
        this.email = email;
        this.password = password;
    }

    public int getUser_id() {
        return user_id;
    }

    public void setUser_id(int user_id) {
        this.user_id = user_id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}

---

---/src/main/java/com/keyin/user/UserDAO.java
package com.keyin.user;

import com.keyin.database.DatabaseConnection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserDAO {

    public void getAllUsers() throws SQLException {
        ResultSet rs = null;
        String sql = "SELECT * FROM users";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            rs = pstmt.executeQuery();
            while (rs.next()) {
                int user_id = rs.getInt("user_id");
                String username = rs.getString("username");
                String email = rs.getString("email");
                String password = rs.getString("password");

                System.out.println("-------------------------------");
                System.out.println("Username: " + username);
                System.out.println("Email: " + email);
                System.out.println("Password: " + password);
                System.out.println("------------------------------------");

            }

        };
    }

    public void addUser(User user) throws SQLException{
        String sql = "INSERT INTO users (username,email, password) VALUES (?, ?, ?)";

        try(Connection conn = DatabaseConnection.getConnection()){
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, user.getUsername());
            preparedStatement.setString(2, user.getEmail());
            preparedStatement.setString(3, user.getPassword());
            preparedStatement.executeUpdate();

        }
    }

    public User getUserByUsername(String username) throws SQLException {
        String sql = "SELECT * FROM users WHERE username = ?";
        try(Connection conn = DatabaseConnection.getConnection()){
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, username);
            try (ResultSet rs = preparedStatement.executeQuery()){
                if (rs.next()) {
                    return new User(
                            rs.getInt("user_id"),
                            rs.getString("username"),
                            rs.getString("email"),
                            rs.getString("password")

                    );
                }
            }
        }
        return null;
    }

}

---

---/src/main/java/com/keyin/user/UserService.java
package com.keyin.user;

import org.mindrot.jbcrypt.BCrypt;

import java.sql.SQLException;

public class UserService {

    private UserDAO userDAO;

    public UserService() {
        userDAO = new UserDAO();
    }

    public void getAllUsers() throws SQLException {

        userDAO.getAllUsers();

    }

    public boolean addUser(User user) throws SQLException{
        if(user.equals(null)){
            System.out.println("User Is Null");
            return false;
        }
        String hashedPassword = BCrypt.hashpw(user.getPassword(), BCrypt.gensalt());

        User newUser = new User(user.getUsername(),user.getEmail(), hashedPassword);
        userDAO.addUser(newUser);
        System.out.println("User Created");


        return true;
    }

    public User login(String username, String password) throws SQLException{
        if(username == null || password == null){
            System.out.println("The User Does Not Exist");
        }

        User user = userDAO.getUserByUsername(username);

        if(user == null){
            System.out.println("The User Does Not Exist! ");
            return null;
        }

        if(!BCrypt.checkpw(password, user.getPassword())){
            System.out.println("Wrong Password, Please Try Again!");
            return null;
        }

        System.out.println("User Has Passed Auth");

        return user;
    }





}

---

---/src/main/resources/SQL/create.sql
CREATE TABLE users (
                       user_id SERIAL PRIMARY KEY,
                       username VARCHAR(50) NOT NULL,
                       email VARCHAR(100) NOT NULL UNIQUE,
                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE cars (
                      car_id SERIAL PRIMARY KEY,
                      make VARCHAR(50) NOT NULL,
                      model VARCHAR(50) NOT NULL,
                      year INT NOT NULL,
                      price DECIMAL(10, 2) NOT NULL,
                      seller_id INT NOT NULL,
                      FOREIGN KEY (seller_id) REFERENCES users(user_id) ON DELETE CASCADE
);

---

